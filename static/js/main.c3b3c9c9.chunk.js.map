{"version":3,"sources":["Charts/LossByIteration.js","Charts/DataPlot.js","Chart.js","ChartContainer.js","GradientDescent.js","Data.js","App.js","index.js"],"names":["LossByIteration","loss","data","labels","map","value","index","borderColor","color","datasets","label","backgroundColor","options","scales","xAxes","display","yAxes","id","DataPlot","bestFit","fixedX","Array","from","column","obj","fixedY","xData","thetaValues","transpose","matrix","bestFitY","features","multiply","row","get","chartData","type","Chart","name","chartName","lossByIteration","dataPlot","allCharts","ChartContainer","useState","focus","setFocus","filter","unfocusedCharts","setUnfocusedCharts","className","onClick","e","preventDefault","focusOnChart","CalculateNextThetas","theta","alpha","X","y","sigma","length","m","size","thetaM","fill","console","log","item","total","i","sigmaM","nextTheta","subtract","arrTheta","CalculateCost","predictions","sqrErrors","square","sum","getLinearData","randX","aY","randY","aX","upperBound","lowerBound","randomInt","App","setData","thetas","setThetas","setLoss","currentTheta","setCurrentTheta","function","dLoss","information","setInformation","setChartData","useEffect","updateDataShape","shape","evaluated","Math","min","getQuadraticData","String","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3b3c9c9.chunk.js","sourcesContent":["import React from 'react'\nimport { Line } from 'react-chartjs-2'\n\n\nexport const LossByIteration = ({loss}) => {\n    const x = loss.map((value, index) => index)\n\n    const data = {\n        labels: x,\n        borderColor: 'rba(255,255,255)',\n        color: 'rba(255,255,255)',\n        datasets: [{\n            label: 'Loss by Iteration',\n            data: loss,\n            color: 'rgba(255, 255, 255)',\n            backgroundColor: 'rgba(255, 255, 255)',\n            borderColor: 'rgb(255,255,255)',\n        }],\n        options: {\n        scales: {\n            xAxes: [{\n                display: false\n            }],\n            yAxes: [{\n                borderColor: 'rgb(255,255,255)',\n                display: true,\n            }]\n            },\n        }\n    }\n\n    return (\n        <>\n            <Line \n                id=\"LossByIteration\"\n                data={data}\n            />\n        </>\n    )\n}\n\nexport default LossByIteration","import React from 'react'\nimport { Scatter } from 'react-chartjs-2'\nimport { row, column, matrix, transpose, multiply }  from 'mathjs'\n\nexport const DataPlot = ({bestFit, data}) => {\n\n    //Get linear X feature and Y values\n    const fixedX = Array.from(column(data[0], 1)).map(obj => obj.value)\n    const fixedY = Array.from(data[1]).map(obj => obj.value)\n\n    const xData = data[0]\n\n\n    const thetaValues = transpose(matrix(bestFit))\n    const bestFitY = fixedX.map((features, index) => {\n        var calculatedValue =  multiply(row(xData, index), thetaValues).get([0])\n        return(calculatedValue)\n    })\n\n    const chartData = {\n        labels: fixedX,\n        datasets: [{\n            type: 'scatter',\n            label: 'Data to Fit',\n            data: fixedY,\n            backgroundColor: 'rgba(255, 255, 255)'\n        }, {\n            type: 'line',\n            label: 'Best Fit Line',\n            data: bestFitY,\n            backgroundColor: 'rgb(54, 162, 235)'\n        }],\n        \n    }\n\n    return (\n        <>\n            <Scatter id = \"DataPlot\" data={chartData}/>\n        </>\n    )\n}\n\nexport default DataPlot\n","import React from 'react'\nimport LossByIteration from './Charts/LossByIteration'\nimport DataPlot from './Charts/DataPlot'\n\nfunction Chart({chartName, chartData}) {\n    const getChartByName = (name) => {\n        if (name === \"LossByIteration\"){\n            return (<LossByIteration loss={chartData.lossByIteration}/>)\n        } else if (name === \"DataPlot\") {\n            return (<DataPlot bestFit={chartData.dataPlot} data={chartData.data}/>)\n        }\n    }\n\n    return (\n        <>\n            {getChartByName(chartName)}\n        </>\n    )\n}\n\nexport default Chart\n","import React from 'react'\nimport Chart from './Chart'\nimport './App.css'\nimport { useState } from 'react'\nconst allCharts = [\"LossByIteration\", \"DataPlot\"]\n\nexport default function ChartContainer({chartData}) {\n    \n    const [focus, setFocus] = useState(\"LossByIteration\")\n    const [unfocusedCharts, setUnfocusedCharts] = useState(allCharts.filter((chartName)=>(chartName !== focus)))\n    const focusOnChart = (e, name) => {\n        e.preventDefault()\n        setFocus((focus) => {return (name)})\n        setUnfocusedCharts(allCharts.filter((chartName)=>(chartName !== name)))\n    }\n\n    return (\n        <div className=\"ChartContainer\">\n            <div className=\"FocusedChart\">\n                {<Chart \n                chartName={focus} \n                chartData={chartData}\n                className=\"Chart\"/>}\n            </div>\n            <div className=\"UnfocusedCharts\">\n                {unfocusedCharts.map((chartName) => {\n                    return(\n                    <div  key={chartName} onClick={(e) => focusOnChart(e, chartName)} name={chartName}>\n                        <Chart \n                        chartName={chartName}\n                        chartData = {chartData}\n                        className=\"Chart\"/>\n                    </div>)\n                })}\n            </div>\n        </div>\n    )\n}\n","import { matrix, multiply, subtract, square, size, sum, row } from 'mathjs'\n\nexport const CalculateNextThetas = (theta, alpha, X, y) => {\n\n    if (theta === null){\n        return\n    }\n\n    var sigma = new Array(theta.length)\n    const m = size(y).get([0])\n    const thetaM = matrix(theta)\n    sigma.fill(null)\n\n    console.log(y)\n\n    sigma = sigma.map((item, index) => {\n\n        var total = 0\n        for (var i = 0; i < m; i++){\n\n            // console.log(\"FEATURES: \", row(X, i))\n            // console.log(\"THETA: \", thetaM)\n            // console.log(\"FEATURES * THETA: \", multiply(row(X, i), thetaM).get([0]))\n            // console.log(\"LABEL: \", y.get([i]))\n            // console.log(\"CHAIN RULE: \", X.get([i, index]))\n\n\n            total += (multiply(row(X, i), thetaM).get([0]) - y.get([i])) * X.get([i, index])\n        }\n\n        // console.log(\"TOTAL FOR THETA#\", index, \": \", total)\n\n        return(total * (alpha / m))\n    })\n\n    \n    const sigmaM = matrix(sigma)\n\n    console.log(\"THETA: \",Array.from(thetaM))\n    console.log(\"SIGMA: \",Array.from(sigmaM))\n\n    const nextTheta = subtract(thetaM, sigmaM)\n\n    const arrTheta = Array.from(nextTheta).map((obj) => obj.value)\n    console.log(\"FINAL: \",arrTheta)\n    return(arrTheta)\n\n}\n\nexport const CalculateCost = (theta, X, y) => {\n\n    if (theta === null){\n        return\n    }\n\n    theta = matrix(theta)\n\n    const predictions = multiply(X, theta)\n    const sqrErrors = square(subtract(predictions, y))\n    const Cost = (1 / (2 * size(y).get([0]))) * sum(sqrErrors)\n\n    return(Cost)\n\n}","import {matrix, randomInt, random} from 'mathjs'\n\n\n\nexport const getLinearData = () => {\n\n    const slope = 1\n    const randX = Array(100).fill(0).map((aY, index) => ([1, index]))\n    const randY = Array(100).fill(0).map((aX, index) => {\n\n        var upperBound = 0;\n        var lowerBound = 0;\n        if ((slope * index) + 25 < 100){\n            upperBound = (slope * index) + 25;\n        } else { upperBound = 100}\n\n        if ((slope * index) - 25 > 0){\n            lowerBound = (slope * index) - 25;\n        } else { lowerBound = 0}\n\n        var ry = randomInt(upperBound, lowerBound)\n        \n        return(ry)\n    })\n    return ([matrix(randX), matrix(randY)])\n}\n\nexport const getQuadraticData = () => {\n\n    const a = 0.5;\n    const b = 0.25;\n    const randX = Array(100).fill(0).map((aY, index) => ([1, index, index * index]))\n    const randY = Array(100).fill(0).map((aX, index) => {\n\n        var upperBound = 0;\n        var lowerBound = 0;\n        var evaluated = (a * (index * index)) + (b * index)\n\n        console.log(evaluated)\n\n        if (evaluated + 25 < 100){\n            console.log(\"OK WITH UPPER\")\n            upperBound = evaluated + 25;\n        } else { \n            upperBound = 100\n        }\n\n        if (evaluated - 25 > 0){\n            console.log(\"OK WITH LOWER\")\n            lowerBound = evaluated - 25;\n        } else { \n            lowerBound = 0\n        }\n\n        var ry = randomInt(upperBound, Math.min(lowerBound, 100))\n        \n        return(ry)\n    })\n\n\n    return ([matrix(randX), matrix(randY)])\n}\n\n//export const X = matrix(randX)\n\n//export const y = matrix(randY)","import { useState, useEffect } from \"react\";\n// import CostVsIter from \"./CostVsIter\";\n// import DataPlot from \"./DataPlot\"\nimport ChartContainer from \"./ChartContainer\"\nimport Info from \"./Info\"\nimport { CalculateNextThetas, CalculateCost }  from \"./GradientDescent\"\nimport { getLinearData, getQuadraticData} from \"./Data.js\";\nimport './App.css';\n\n\nfunction App() {\n\n  //Algorithm to show\n  const [algorithm, setAlgorithm] = useState(\"Gradient Descent\")\n  //Data to fit\n  const [data, setData] = useState(getLinearData())\n  //List of calculated thetas\n  const [thetas, setThetas] = useState([null, [0, 0]])\n  //List of loss\n  const [loss, setLoss] = useState([0, 0])\n  //Current theta shown\n  const [currentTheta, setCurrentTheta] = useState(1)\n  //Information to be displayed\n  const [information, setInformation] = useState({\n    function: \"0 + 0x\",\n    theta: [0, 0],\n    dLoss: 0,\n    alpha: 0.0005,\n  })\n  //Data for all charts\n  const [chartData, setChartData] = useState({\n    data: data,\n    lossByIteration: loss,\n    dataPlot: [0, 0],\n  })\n\n  const lastTheta = () => {\n    if (thetas[currentTheta - 1] === null){\n      console.log('Cant iterate back further')\n    } else {\n      setCurrentTheta(currentTheta - 1)\n    }\n  }\n\n  const nextTheta = () => {\n    if (currentTheta + 1 === thetas.length){\n      setThetas([...thetas, CalculateNextThetas(thetas[currentTheta], information.alpha, data[0], data[1])])\n      setLoss([...loss, CalculateCost(thetas[currentTheta], data[0], data[1])])\n    }\n    setCurrentTheta(currentTheta + 1)\n  }\n\n  useEffect(() => {\n    setChartData({\n\n      data: data,\n      lossByIteration: loss,\n      dataPlot: thetas[currentTheta],\n      \n    })\n  }, [data, loss, thetas])\n\n\n\n  const updateDataShape = (e, shape) => {\n\n    e.preventDefault()\n\n    if (shape === \"Linear\"){\n      console.log(\"setting linear data\")\n      setData(getLinearData())\n      \n      setThetas([null, [0, 0]])\n      setCurrentTheta(1)\n      setLoss([0, 0])\n\n      setInformation({...information, alpha: 0.0005})\n\n    } else if (shape === \"Quadratic\"){\n      setData(getQuadraticData())\n\n      setThetas([null, [0, 0, 0]])\n      setCurrentTheta(1)\n      setLoss([0, 0])\n\n      setInformation({...information, alpha: 0.00000006})\n    }\n  }\n\n  return (\n    <>\n\n      <div className=\"DropdownContainer\">\n\n        <button onClick={(e) => updateDataShape(e, \"Linear\")}>Linear</button>\n        <button onClick={(e) => updateDataShape(e, \"Quadratic\")}>Quadratic</button>\n\n      </div>\n\n      <ChartContainer chartData={chartData}/>\n\n      <div className=\"IterationContainer\">\n         <button onClick={()=>lastTheta()}>←</button>\n            <p>{(String(currentTheta - 1) + ' / ' + String(thetas.length - 2))}</p>\n         <button onClick={()=>nextTheta()}>→</button>\n       </div>\n\n    </>\n  )\n  \n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}